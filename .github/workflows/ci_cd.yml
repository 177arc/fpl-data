# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: CI/CD

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ develop ]

jobs:
  build:
    name: Build, Test and Deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Restore cached dependencies
      uses: actions/cache@v2
      with:
        # This path is specific to Ubuntu
        path: ~/.cache/pip
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements_ci_cd.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
        if [ -f requirements.txt ]; then pip install -r requirements_ci_cd.txt; fi
    - name: Convert Jupyter notebook to code
      run: |
        jupyter nbconvert --to script prep_data.ipynb
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Run component tests
      run: |
        python -m unittest discover -s "tests/comp"
    - name: Run intergration tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd tests/integration
        python -m unittest discover -s "."
    - name: Create lambda package
      run: |
        mkdir dist
        zip -r dist/fpl-data.zip *.py *.ipnynb data/** fpldata/** -x *.pyc
    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: fpl-data
        path: dist/fpl-data.zip
    - name: Deploy to fpl-data-test lambda
      if: github.ref == 'refs/heads/develop'
      uses: appleboy/lambda-action@v0.0.7
      with:
        aws_region: eu-west-2
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        function_name: fpl-data-test
        zip_file: dist/fpl-data.zip
    - name: Run end-to-end tests
      if: github.ref == 'refs/heads/develop'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd tests/e2e
        python -m unittest discover -s "."
    - name: Deploy to fpl-data lambda
      if: github.ref == 'refs/heads/master'
      uses: appleboy/lambda-action@v0.0.7
      with:
        aws_region: eu-west-2
        aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        function_name: fpl-data
        zip_file: dist/fpl-data.zip
    - name: Create release
      if: github.ref == 'refs/heads/master'
      id: create-release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false
    - name: Upload release package
      if: github.ref == 'refs/heads/master'
      id: upload-release-package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: dist/fpl-data.zip
        asset_name: fpl-data.zip
        asset_content_type: application/zip